@startuml classOverview 
'Objects



class inputHandler {
    <<Context>>
    + inputHandler()
    + ~inputHandler()
    + bool getIsUrl()
    + void setInput(std::string const in)
    + void setProcessSuccess(bool flag)
    + void pickStrategy(std::string input)
    + void executeStrategy()
    + std::string getInput()
    + Strategy* getStrategyPtr()
    + bool getProcessSuccess()
    + std::shared_ptr<scanResults> sharedResult
    
    - bool argumentChecker(std::string arg)
    - bool processSuccess
    - bool isUrl
    - fileManager* fileManagerPtr
    - std::string input
    - Strategy* inputStrategy
    - std::string localPath
}

class fileManager {
    + void checkAndClear(std::string path)
    + void clearDir(std::string path)
    + bool isEmpty(std::string path)
    + bool dirExists(std::string path)
    + bool checkValidRepoPath(std::string path)
    + bool checkContentsIsEmpty(std::string path)
    + void ensureFolderExists(std::string path)
    + std::string copyRepoToInternal(const std::string &srcPath)

    - std::filesystem::path stringToPath(std::string string)
    - bool checkIsDir(std::string path)
    - bool dirIsEmpty(std::string path)
    - bool fileIsEmpty(std::string path)
    - void mkdir(std::string path)
}



class typeURL {
    + typeURL(inputHandler *h) 
    + ~typeURL()
    + std::string getInput() override
    + void processInput() override
    - inputHandler *parentInputHandler
}
class typeFolder {
    + typeFolder(inputHandler *h) 
    + ~typeFolder()
    + bool checkOwnershipIssue(const std::string &path)
    + std::string getInput() override
    + void processInput() override
    - inputHandler *parentInputHandler
}
abstract Strategy {
    <<abstract>>
    + virtual std::string getInput() = 0
    + virtual ~Strategy()
    + virtual void processInput() = 0
    - bool handleLibGit2Error(int err)
}


class scanResults {
    + scanResults()
    + ~scanResults()
    
    + git_repository *repo
    + std::string pathToRepo
    + std::unordered_map<std::string, bool> foundMap
    + std::unordered_map<std::string, std::vector<std::string>> pathsMap
    + int resultNrOfCommits
    + std::unordered_map<std::string, int> contributorCounts
    + std::unordered_map<std::string, std::set<std::string>> leaksReasonAndFilepathSet
}

class Scanner {
    + Scanner(const inputHandler &inputHandler)
    + ~Scanner()

    + void scanForWorkflow()
    + void scanFor(std::vector<std::string> searchAlts, std::string name)
    + void pushBackPath(std::pair<std::string, std::string> entry)
    + void scanGitAttributes()
    + void scanForTest(std::vector<std::string> searchAlts, std::string name)
    + void runGitLeaks()
    + void parseGitleaksOutput(const std::string &jsonFilePath)
    + void setRepoPath(std::string path)
    + void setFoundMap(bool isFound, const std::string name)
    + std::string getRepoPath()
    + std::shared_ptr<scanResults> sharedResult

    - Searcher *mySearcher
    - std::string repoPath
    - fileManager *fileManagerPtr
    - GitScanner *myGitScanner
}

class Searcher {
    + Searcher(Scanner *scanner)
    + std::vector<std::string> searchFor(std::string wherePath, std::string searchFor)
    + std::vector<std::string> endsWithFile(std::string wherePath, std::string searchFor)
    + std::vector<std::string> contains(std::string wherePath, std::string searchFor)

    - Scanner *myScanner
    - std::vector<std::string> search(std::string wherePath, std::string pattern)
    - std::string lower(std::string str)
    - std::string makeRelToGitRoot(std::string absPath)
}

Searcher --> Scanner : has a reference to


class GitScanner {
    + GitScanner(Scanner *scanner)
    + std::unordered_map<std::string, int> countContributors(git_repository *repository)
    + int countCommits(git_repository *repository)

    - Scanner *myScanner
}

GitScanner --> Scanner : has a reference to

'Relations
Scanner -->  resultInterpreter
inputHandler --> Scanner : "Passes shared ptr" 
inputHandler --> scanResults : creates and owns
inputHandler --> resultInterpreter : "Passes shared ptr" 
Strategy --"1" inputHandler : Strategy Pattern
Strategy <|-- typeURL
Strategy <|-- typeFolder
fileManager -- inputHandler : uses
fileManager -- resultInterpreter : uses


resultInterpreter -- scanResults

'Result related lines
class resultInterpreter {
    + resultInterpreter(const inputHandler &inputHandler)
    + bool isFound(std::string entry)
    
    + void printDetails()
    + void printMinimal()
    + void interpretResults()
    + void interpretLeaks()
    + std::vector<std::unique_ptr<resultEntry>> AllResultEntries

    - void printGitAttributes()
    - std::shared_ptr<scanResults> sharedResult
    - std::unique_ptr<resultEntry> pickAndCreateEntry(std::string name)
    - std::vector<std::pair<std::string, int>> rankContributors()
    - static bool compareContributors(const std::pair<std::string, int> &a, 
                                      const std::pair<std::string, int> &b)
}

abstract resultEntry {
    <<abstract>>
    + resultEntry(std::shared_ptr<scanResults> res)
    + resultEntry()
    + virtual void indicatorDeterminator() = 0
    + virtual void printEntry() = 0

    + std::string entryName
    + std::vector<std::string> paths
    + bool isFound
    + std::string Indication
    + std::string IndicationReason
    + std::string readMore
    + bool allowMultiple
    + bool requireContent
    + bool required

    # std::shared_ptr<scanResults> sharedResult

    # void VerifyIfFound(std::string name)
    # void noMoreThanOne(std::string name)
    # void checkContents()
    # void parentPrintEntry()
    # bool crossRefrenceIgnore(std::string path)
    # void implicitIndication()
    # void updateError()
    # void handleCrossRefrence(std::vector<std::string> &paths)
    # std::string makeRelToGitRoot(std::string path)
    # void applyFileConfigRules()
}
class readmeEntry {
    + readmeEntry(std::shared_ptr<scanResults> res)
    + readmeEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
}

class workflowEntry {
    + workflowEntry(std::shared_ptr<scanResults> res)
    + workflowEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
}
class licenseEntry {
    + licenseEntry(std::shared_ptr<scanResults> res)
    + licenseEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
}

class gitignoreEntry {
    + gitignoreEntry(std::shared_ptr<scanResults> res)
    + gitignoreEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
}

class leaksEntry {
    + leaksEntry(std::shared_ptr<scanResults> res)
    + leaksEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
    - std::vector<std::pair<std::string, std::set<std::string>>> IndicationReasons
}

class testEntry {
    + testEntry(std::shared_ptr<scanResults> res)
    + testEntry()

    - void indicatorDeterminator() override
    - void printEntry() override
}

class configHandler {
    + configHandler()
    + ~configHandler()
    + void configure(std::string path = PATH_CONFIG)

    - nlohmann::json jFile
    - template <typename T> void readConfig(std::string key, T &targetValue)
    - void readDstPath()
    - void readOutputMode()
    - void readIndicationParams()
    - void openAndSetConfigFile(std::string path)
    - void readFileReq(std::string file, std::string key, bool &targetValue)
}

struct config {
    {static} + std::string relRepoPath
    {static} + std::string relWorkflowPath
    {static} + bool minimalOutputMode
    {static} + std::unordered_map<std::string, fileParams> fileReqs
}

config -- configHandler : "Write to"
config -- inputHandler : "Read from"
config -- resultInterpreter : "Read from"

resultInterpreter --"*" resultEntry
resultEntry <|-- testEntry : Inherits
resultEntry <|-- leaksEntry : Inherits
resultEntry <|-- readmeEntry : Inherits
resultEntry <|-- licenseEntry
resultEntry <|-- workflowEntry
resultEntry <|-- gitignoreEntry
@enduml